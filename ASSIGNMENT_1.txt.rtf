{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs74\fsmilli37333 \cf2 \expnd0\expndtw0\kerning0
ASSIGNMENT 1\uc0\u8232 \u8232 
\f1\b\fs34\fsmilli17333 What are Primitive Data Types in Java?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 In Java, primitive data types are basic data types that are not objects. They include int, double, Boolean, char, byte, short, long, and float. These data types hold simple values, and they are not instances of classes.
\f0\fs32 \

\f2\fs34\fsmilli17333 \'a0
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf2 What are the Identifiers in Java?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 Identifiers in Java are used to name classes, methods, variables, and other program elements. They must adhere to certain rules, such as starting with a letter, followed by letters, digits, or underscores, and they are case-sensitive.
\f0\fs32 \

\f2\fs34\fsmilli17333 \'a0
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf2 What is a Final Class in Java?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 In Java, a final class is a class that cannot be subclassed or extended. It means that you cannot create a new class that inherits from a final class. This is often used to prevent further modification or extension of a class, making it suitable for situations where you want to ensure that a class's behaviour remains consistent.
\f0\fs32 \

\f2\fs34\fsmilli17333 \'a0
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf2 What are the two ways to make a class final in Java?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 You can make a class final in Java using one of two ways:
\f0\fs32 \

\f2\fs34\fsmilli17333 Declare the class with the final keyword, e.g., final class MyFinalClass \{...\}.
\f0\fs32 \

\f2\fs34\fsmilli17333 Make all the constructors of the class private, effectively preventing the creation of subclasses from outside the class.
\f0\fs32 \

\f2\fs34\fsmilli17333 \'a0
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf2 Can you create an instance of a final class in another class?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 Yes, you can create an instance of a final class in another class, as long as you are not trying to subclass it. Final classes can be instantiated like any other class, and their methods and fields can be accessed.
\f0\fs32 \

\f2\fs34\fsmilli17333 \'a0
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf2 What is the "static" keyword used for?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 The static keyword in Java is used to define class-level members. Variables, methods, and nested classes declared as static belong to the class rather than instances of the class. They can be accessed using the class name itself without creating an instance of the class.
\f0\fs32 \

\f2\fs34\fsmilli17333 \'a0
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf2 What is the use of the "final" keyword?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 The final keyword in Java has different uses:
\f0\fs32 \

\f2\fs34\fsmilli17333 When applied to a variable, it makes the variable a constant (its value cannot be changed after initialization).
\f0\fs32 \

\f2\fs34\fsmilli17333 When applied to a method, it indicates that the method cannot be overridden by subclasses.
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf2 When applied to a class, it indicates that the class cannot be subclassed.
\f0\b0\fs32 \

\f1\b\fs34\fsmilli17333 What are the types of casting in Java?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 In Java, there are two types of casting:
\f0\fs32 \

\f2\fs34\fsmilli17333 Implicit casting (widening): This is an automatic conversion where the data type with a smaller range is converted to a data type with a larger range without data loss.
\f0\fs32 \

\f2\fs34\fsmilli17333 Explicit casting (narrowing): This involves manually converting a data type with a larger range to a data type with a smaller range, and it may result in data loss.
\f0\fs32 \

\f2\fs34\fsmilli17333 \'a0
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf2 What is Boxing and Unboxing in Java?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 Boxing is the process of converting a primitive data type into an object (e.g., converting an int to an Integer). Unboxing is the reverse process, where an object is converted back to its primitive data type. This is often used in situations where objects are required, but primitive data types are available.
\f0\fs32 \

\f2\fs34\fsmilli17333 \'a0
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs34\fsmilli17333 \cf2 What is the difference between Keywords, Identifiers, and Literals in Java?
\f0\b0\fs32 \
\pard\pardeftab720\partightenfactor0

\f2\fs34\fsmilli17333 \cf2 Keywords are reserved words in Java that have special meanings and cannot be used as identifiers (variable or class names).
\f0\fs32 \

\f2\fs34\fsmilli17333 Identifiers are names used for variables, methods, classes, etc., and they must adhere to naming rules.
\f0\fs32 \

\f2\fs34\fsmilli17333 Literals are constant values used in Java, like numbers, strings, or characters, that are directly represented in the code.
\f0\fs32 \
\pard\pardeftab720\partightenfactor0

\fs37\fsmilli18667 \cf2 \'a0
\fs32 \
}